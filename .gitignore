######arvore binaria########
from os import system


class Noh:
    dado,esquerdo,direito=0,None,None
    def __init__(self,dado):
        self.esquerdo=None
        self.direito=None
        self.dado=dado
    def __str__(self):
        return "{"+str(self.dado)+"}"
    #fim da classe noh

class ArvoreBin:
    def __init__(self):
        self.raiz=None
    def criaNoh(self,dado):
        return Noh(dado)
    def insere(self,raiz,dado):
        if raiz ==None:
            return self.criaNoh(dado)
        else:
            if dado <= raiz.dado:
                raiz.esquerdo=self.insere(raiz.esquerdo,dado)
            else:
                raiz.direito=self.insere(raiz.direito,dado)
        return raiz

    def pesquisa(self,raiz,valor):
        if raiz ==None:
            return 0
        else:
            if valor == raiz.dado:
                return 1
            else:
                if valor < raiz.dado:
                    return self.pesquisa(raiz.esquerdo.valor)
                else:
                    return self.pesquisa(raiz.direito,valor)
    def imprimeArvore(self,raiz):
        if raiz==None:
            pass
        else:
            self.imprimeArvore(raiz.esquerdo)
            print("(",raiz.dado,")")
            self.imprimeArvore(raiz.direito)
    def imprimeArvoreInvertida(self,raiz):
        if raiz==None:
            pass
        else:
            self.imprimeArvoreInvertida(raiz.direito)
            print ("(",raiz.dado,")")
            self.imprimeArvoreInvertida(raiz.esquerdo)

    def imprimenoh(self,raiz):
        if raiz==None:return
        a=raiz.dado
        if raiz.esquerdo !=None:
            b=raiz.esquerdo.dado
        else:
            b=None
        if raiz.direito !=None:
            c=raiz.direito.dado
        else:
            c=None
        print("(",a,"[",b,",",c,"]",")",)
        self.imprimenoh(raiz.esquerdo)
        self.imprimenoh(raiz.direito)

    def menorvalor(self,raiz):
        while(raiz.esquerdo!=None):
            raiz=raiz.esquerdo
        return raiz.dado

    def maiorvalor(self,raiz):
         while(raiz.direito!=None):
             raiz=raiz.direito
         return raiz.dado
          
    def remove(self,raiz,valor):
        atual=raiz
        nopai=raiz
        ehfilhoesquerdo = True
        while(atual.dado!=valor):
             nopai=atual
             if (valor<atual.dado):
                ehfilhoesquerdo=True
                atual=atual.esquerdo
             else:
                ehfilhoesquerdo=False
                atual=atual.direito
             if atual==None:
                 return False
        if (atual.esquerdo == None and atual.direito == None):
            if (atual == raiz):
                raiz =None
            elif ehfilhoesquerdo:
                nopai.esquerdo = None
            else:
                nopai.direito=None
        elif atual.direito==None:
            if atual==raiz:
                raiz=atual.esquerdo
            elif ehfilhoesquerdo:
                nopai.esquerdo=atual.esquerdo
            else:
                nopai.direito = atual.direito
        elif atual.esquerdo ==None:
            if atual == raiz:
                raiz = atual.direito
            elif ehfilhoesquerdo:
                nopai.esquerdo=atual.direito
            else:
                nopai.direito=atual.direito
        #2 filhos
        else:
            suc=self.Sucessor(atual)
            if atual ==raiz:
                raiz=suc
            elif ehfilhoesquerdo:
                nopai.esquerdo=suc
            else:
                nopai.direito=atual.esquerdo
            suc.esquerdo=atual.esquerdo      
        return True

    def Sucessor(self,no):
        paiSucessor=no
        sucessor=no
        atual=no.direito
        while(atual!=None):
            paiSucessor=sucessor
            sucessor=atual
            atual=atual.esquerdo
        if sucessor !=no.direito:
            paiSucessor.esquerdo=sucessor.direito
        return sucessor

    


    


def menu():
    print("************************************")
    print("****************Menu****************")
    print("1-Adicionar nó")
    print("2-Imprimir nó")
    print("3-imprimir arvore ordenada")
    print("4-imprimir arvore invertida")
    print("5-Pesquisa")
    print("6-menor termo da arvore")
    print("7-maior termo da arvore")
    print("8-Retira um termo da arvore")
    print("0-Sair do Programa")
    print("************************************")
    return int(input("digite sua opção:"))


    





    
 
def Principal():
    x=int(input("Digite o valor da raiz da arvore:"))
    Arvore=ArvoreBin()
    raiz=Arvore.criaNoh(x)
 
    while(True):
        op=menu()
        if (op==0):
            break
        elif(op==1):
            
            dado=int(input("Digite o valor do no que vai adicionar:"))
            Arvore.insere(raiz,dado)
            
        elif (op==2):
            
            Arvore.imprimenoh(raiz)
            input("\n\ndigite Enter Para continuar")
        elif(op==3):
            
            Arvore.imprimeArvore(raiz)
            input("\n\ndigite Enter Para continuar")
        elif(op==4):
            
            Arvore.imprimeArvoreInvertida(raiz)
            input("\n\ndigite Enter Para continuar")
        elif(op==5):
            
            p=int(input("digite o valor para pesquisa:"))
            if Arvore.pesquisa(raiz,p):
                print("Encontrado")
                print(p)
            else:
                print("Não encontrado")
                input("digite Enter Para continuar")
        elif(op==6):
             print(Arvore.menorvalor(raiz))
        elif(op==7):
            print(Arvore.maiorvalor(raiz))
        elif(op==8):
            Arvore.imprimenoh(raiz)
            dado=int(input("Digite o valor do no que vai ser apagado:"))
            Arvore.remove(raiz,dado)
            input("numero retirado ou inexistente enter para continuar:")
             
             
        
        

Principal()
